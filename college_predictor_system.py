# -*- coding: utf-8 -*-
"""college-predictor-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e4B6y_TfsL4lJXhNp1qoj8ehcKDcqJGG

# **<span style="color:#a300cc;">üì∞About the Dataset</span>**

**Context :**
Joint Entrance Examination ‚Äì Main (JEE-Main), formerly All India Engineering Entrance Examination (AIEEE), is an Indian standardised computer-based test for admission to various technical undergraduate programs in engineering, architecture, and planning across colleges in India. The exam is conducted by the JEE Apex Board for Admission for B.Tech, B.Arch, etc. programs in the premier technical institutes such as the National Institutes of Technology and Indian Institutes of Information Technology are based on the rank secured in the JEE-Main. It is usually conducted twice every year.

**IITs and NITs :**
The Indian Institutes of Technology (IITs) are the globally appreciated engineering and technological institutes in India. IITs have maintained quality education and internationally acclaimed research facilities. IIT JEE Exam is the most popular engineering admission entrance test conducted in India.
National Institute of Technology (NITs) are premier engineering colleges in India offering admission to degree courses at both undergraduate and postgraduate level.

# **<span style="color:#a300cc;">üìÅAbout the files</span>**

**year** - The year of the conducted JEE exam  

**institute_type** - Type of Institute (IIT or NIT)  

**round_no** - The counseling round number

**quota** - The reservation quota   

AI : All-India

HS : Home-State

OS : Other-State

AP : Andhra Pradesh

GO : Goa

JK : Jammu & Kashmir

LA : Ladakh

**pool** - The gender quota

**institute_short** - THe short name of the Institution   

**program_name** - The name of the program/stream  

**program_duration** - The duration of the course (in years)   

**degree_short** - The name of the degree (Abbreviated)    

**category** - The caste category  

GEN : General

OBC-NCL : Other Backward Classes-Non Creamy Layer

SC : Scheduled Castes

ST : Scheduled Tribes

GEN-PWD : General & Persons with Disabilities

OBC-NCL-PWD : Other Backward Classes & Persons with Disabilities

SC-PWD : Scheduled Castes & Persons with Disabilities

ST-PWD : Scheduled Tribes & Persons with Disabilities

GEN-EWS : General & Economically Weaker Section

GEN-EWS-PWD : General & Economically Weaker Section & Persons with Disability

**opening_rank** - The opening (starting) rank for getting admission in the institution    

**closing_rank** - The closing (ending) rank for getting admission in the institution  

**is_preparatory** - If admission to a preparatory course is available  -  0 : No, 1 : Yes


**Acknowledgement:**
*This data is provided by scraping the website : https://cutoffs.iitr.ac.in/*

*All credits and rights belong to them.*

***

## **<span style="color: #ff3385;">üì• Before we get started! Let's get our Imports</span>**
"""

#imports

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

"""## **<span style="color:#ff3385;">üìà Let's get the Data</span>**"""

# Read data in a dataframe

# A DataFrame is a data structure that organizes data
#into a 2-dimensional table of rows and columns, much like a spreadsheet.

df = pd.read_csv("https://raw.githubusercontent.com/Satyam4229/IIT-and-NIT-College-Dataset/main/data.csv")
df.tail()



import pandas as pd

# Assuming df is your DataFrame
# For example:
# df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})

# Specify the path where you want to save the CSV file
file_path = '/content/sample_data/data_set.csv'

# Save the DataFrame to a CSV file
df.to_csv(file_path, index=False)  # Set index=False to exclude row indices in the output file

df.columns

del df["Unnamed: 13"]

df.head()

"""## **<span style="color:#ff3385;">üëÄ Exploring the Data</span>**"""

df.info()

df.describe()

# Shape of the Dataset

df.shape

# Columns of the Dataset

Columns = pd.DataFrame(df.columns)
Columns

# Unique values in quota

Quota = pd.DataFrame(df["quota"].unique())
Quota

# Unique values in pool

Pool = pd.DataFrame(df["pool"].unique())
Pool

# Various institutions

Institutes = pd.DataFrame(df["institute_short"].unique(), columns = {'Institute':0})
Institutes

# Various types of programs

Programs = pd.DataFrame(df["program_name"].unique(), columns = {'program':0})
Programs

# Various degrees

Degree = pd.DataFrame(df["degree_short"].unique(), columns = {'Degree':0})
Degree

# Correcting the values

df.loc[df["degree_short"] == "Int Msc.", "degree_short"] = "Int MSc."

df["degree_short"].nunique()

Round = pd.DataFrame(df["round_no"].unique())
Round

# Unique values in category

Category = pd.DataFrame(df["category"].unique())
Category

# Checking the null values in dataset

sns.heatmap(df.isnull(),yticklabels=False,cmap='viridis', alpha = 0.5)

# Creating new CSV file After correcting the Dataset

df.to_csv("iit-and-nit-colleges-admission-criteria-version-2.csv")

"""***

# **<span style="color:#ff3385;">ü•Ω Let's see what all we can explore in this dataset</span>**

> 1. What does reservation say about admit to these colleges?

> 2. What is the most optimum Opening and closing rank in overall years?

> 3. Which universities/colleges provide preparatory courses?

> 4. Which category gets most preference for prepratory courses?

> 5. Institutes and degrees they provide?

> 6. Which institute who provide 4 year and 5 year courses?
"""

#Let's check out All Institutes in the dataset

plt.figure(figsize=(15,8))
institutes = df.groupby(['institute_short']).size().plot(kind = 'bar', color = "#5cd65c", alpha = 0.5)
plt.show()

# Students admitted per year

plt.figure(figsize=(15,8))
plt.title('student per year')
sns.lineplot(x=['2021','2020','2019','2018','2017','2016'],y=df['year'].value_counts(), color = "#ff1a1a", alpha = 0.5)
plt.ylabel('students')

"""## **<span style="color:#ff3385;">1Ô∏è‚É£ What does reservation say about admit to these colleges?</span>**"""

max_quota = df['quota'].value_counts()
max_quota

"""*Since, AI (all India) reservation has max counts - it can be a factor contributing to admissions.*"""

plt.figure(figsize=(15,8))
plt.plot(max_quota, color = "#2e2eb8", alpha = 0.5)
plt.show()

#Yearly quota study

plt.figure(figsize=(15,8))
year_club = df.groupby(['year', 'quota']).size().plot(kind = 'bar', color = "#000000", alpha = 0.5)

"""**<span style="color:#006600;">From the above plot, we see that AI - all India quota covers maximum number of students followed by OS - Other State and HS - Home State.
While the second plot depicts that AI(All India) quota played an important role from 2016 to 2018.</span>**

## **<span style="color:#ff3385;">2Ô∏è‚É£ What is the most optimum Opening and closing rank in overall years??</span>**

------------------------------------------------------------------- **Opening Ranks** ---------------------------------------------------------------------------
"""

avg_opening_rank = df['opening_rank'].mean(axis = 0)
avg_open_rank = round(avg_opening_rank)
print("Average opening rank over the years has been - ", avg_open_rank)

max_opening_rank = df['opening_rank'].max(axis = 0)
max_open_rank = round(max_opening_rank)
print("Max opening rank over the years has been - ", max_open_rank)

min_opening_rank = df['opening_rank'].min(axis = 0)
min_open_rank = round(min_opening_rank)
print("Min opening rank over the years has been - ", min_open_rank)

"""-------------------------------------------------------------------- **Closing Ranks** ---------------------------------------------------------------------------"""

avg_closing_rank = round(df['closing_rank'].mean(axis = 0))
print("Average closing rank over the years has been - ", avg_closing_rank)

max_closing_rank = df['closing_rank'].max(axis = 0)
max_close_rank = round(max_closing_rank)
print("Max closing rank over the years has been - ", max_close_rank)

min_closing_rank = df['closing_rank'].min(axis = 0)
min_close_rank = round(min_closing_rank)
print("Min closing rank over the years has been - ", min_close_rank)

"""**<span style="color:#006600;">From analysis of Opening and Closing ranks, we can say that on average if you score a rank around ~8000 then you might become eligible. While keeping in mind the quota factor, the maximum and minimum ranks still vary on a range of large scale till about 10 lakhs.</span>**

## **<span style="color:#ff3385;">3Ô∏è‚É£  Which universities/colleges provide preparatory courses? </span>**

The IIT Preparatory Course comprises of courses in Mathematics, Physics, Chemistry and English for two semesters after which the candidates are evaluated.
"""

# Which universities/colleges provide preparatory courses (represented by 1)

plt.figure(figsize=(15,8))
prep_true = df.loc[df['is_preparatory'] == 1, 'institute_short'].value_counts()
plt.plot(prep_true, 'o', color = "#ff0000", alpha = 0.5)
plt.xticks(rotation = 60)
plt.show()

"""**<span style="color:#006600;"> From the above chart, we found some of the colleges that provide preparatory courses. Here IIT Kharagpur provides maximum number of preparatory courses to students followed by IIT Roorkee and BHU.</span>**

## **<span style="color:#ff3385;">4Ô∏è‚É£ Which category gets most prefrence for prepratory courses?</span>**
"""

plt.figure(figsize=(15,8))
category_true = df.loc[df['is_preparatory'] == 1, 'category'].value_counts()
category_plot = category_true.plot(kind = 'bar', color = "#000066", alpha = 0.5)

plt.xticks(rotation = 360)
plt.legend()
plt.show()

"""## **<span style="color:#ff3385;">5Ô∏è‚É£ Institutes and degrees they provide </span>**

Here '**degree_short**' The name of the degree (Abbreviated) and '**institute_short**' is the name of institute (Abbreviated)
"""

plt.figure(figsize=(15,8))
year_club = df.groupby(['degree_short','institute_short']).institute_short.count().head(20).plot(kind = 'bar',color = "#ff6600", alpha = 0.5)
plt.legend()
plt.show()

"""**<span style="color:#006600;">As per above bar graph, B.Tech still seems to be the choice of most students when it comes to getting admission in IIT or NITs.</span>**

## **<span style="color:#ff3385;">6Ô∏è‚É£ Institutes who provide 4 year and 5 year courses.</span>**
"""

#Institutes with 4 year courses

plt.figure(figsize=(15,8))

years_true = df.loc[df['program_duration'] == '4 Years', 'institute_short'].value_counts().head(20).plot(kind = 'bar',color = "#47d147", alpha = 0.5)

plt.legend()
plt.show()

"""**<span style="color:#006600;">IIT Kharagpur has most 4 years courses to offer followed by IIT-Delhi and IIT-Kanpur.</span>**"""

#Institutes with 5 year courses

plt.figure(figsize=(15,8))

years_true = df.loc[df['program_duration'] == '5 Years', 'institute_short'].value_counts().head(20).plot(kind = 'bar',color = "#ff4da6", alpha = 0.5)
plt.legend()
plt.show()

"""**<span style="color:#006600;">IIT Kharagpur has most 5 years courses to offer followed by IIT-Varanasi and IIT-Roorkee.</span>**

***

# **<span style="color:#ff3385;">‚öî Evaluation of the model</span>**

Here we evaluate the model and find its error and accuracy rate based on the given feature and target data. We also find out that how the model works when we give it a specific type of data for the prediction.
"""

eval_College = df
eval_College.head()

"""## **<span style="color:#a300cc;">üîÅ Converting object values into numerical form</span>**

**institute_type** - IIT : 0, NIT : 1

**Quota** :-

AI : All-India - 0

HS : Home-State - 3

OS : Other-State - 6

AP : Andhra Pradesh - 1

GO : Goa - 2

JK : Jammu & Kashmir - 4

LA : Ladakh - 5

**Pool** - Gender-Neutral : 0, Female-only : 1

**Category** :-

GEN : General - 0

OBC-NCL : Other Backward Classes-Non Creamy Layer - 4

SC : Scheduled Castes - 6

ST : Scheduled Tribes - 8

GEN-PWD : General & Persons with Disabilities - 3

OBC-NCL-PWD : Other Backward Classes & Persons with Disabilities - 5

SC-PWD : Scheduled Castes & Persons with Disabilities - 7

ST-PWD : Scheduled Tribes & Persons with Disabilities - 9

GEN-EWS : General & Economically Weaker Section - 1

GEN-EWS-PWD : General & Economically Weaker Section & Persons with Disability - 2
"""

# Changing Institute type

eval_College['institute_type'] = [0 if x == 'IIT' else 1 for x in eval_College['institute_type']]
eval_College['institute_type'].unique()

# importing library for encoding

from sklearn.preprocessing import LabelEncoder

# Labeling the quota values

le = LabelEncoder()
eval_College['quota'] = le.fit_transform(eval_College['quota'])
eval_College['quota'].unique()

# changing the pool values

eval_College['pool'] = [0 if x == 'Gender-Neutral' else 1 for x in eval_College['pool']]
eval_College['pool'].unique()

# Labeling the categories

eval_College['category']= le.fit_transform(eval_College['category'])
eval_College['category'].unique()

# Labeling the Institute values

eval_College['institute_short']= le.fit_transform(eval_College['institute_short'])
eval_College['institute_short'].unique()

# Labeling the Program Name values

eval_College['program_name']= le.fit_transform(eval_College['program_name'])
eval_College['program_name'].unique()

# Labeling the Degree values

eval_College['degree_short']= le.fit_transform(eval_College['degree_short'])
eval_College['degree_short'].unique()

# Target data

y = eval_College[['institute_short', 'degree_short', 'program_name']]

# Featured data

X = eval_College[['category', 'quota', 'pool', 'institute_type', 'round_no',
       'opening_rank', 'closing_rank']]

# Spilliting the data into training and testing dataset

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8)

# Importing library for mdoel generation

from sklearn.neighbors import KNeighborsClassifier

# Regenerating the model once again

model = KNeighborsClassifier()

model.fit(X_train, y_train)

# Predicting the model again in numerical terms

y_pred = model.predict(X_test)
y_pred

# Checking the Mean Absolute error of whole model

from sklearn.metrics import mean_absolute_error
print("mean_absolute_error : ", mean_absolute_error(y_pred, y_test))

# Accuracy for Institute short

from sklearn.metrics import classification_report
y_pred1 = y_pred[:,0]
y_test1 = y_test.loc[:,"institute_short"]
print(classification_report(y_pred1, y_test1))

mean_absolute_error(y_pred1, y_test1)

from sklearn.metrics import accuracy_score
Accuracy1 = accuracy_score(y_pred1, y_test1)
Accuracy1

# Accuracy for Program Name

from sklearn.metrics import classification_report
y_pred2 = y_pred[:,1]
y_test2 = y_test.loc[:,"degree_short"]
print(classification_report(y_pred2, y_test2))

mean_absolute_error(y_pred2, y_test2)

from sklearn.metrics import accuracy_score
Accuracy2 = accuracy_score(y_pred2, y_test2)
Accuracy2

# Accuracy for Degree

from sklearn.metrics import classification_report
y_pred3 = y_pred[:,2]
y_test3 = y_test.loc[:,"program_name"]
print(classification_report(y_pred3, y_test3))

mean_absolute_error(y_pred3, y_test3)

from sklearn.metrics import accuracy_score
Accuracy3 = accuracy_score(y_pred3, y_test3)
Accuracy3

# total accuracy of the model

Mean_Accuracy = (Accuracy1 + Accuracy2 + Accuracy3) / 3
Mean_Accuracy

"""**<span style="color:#006600;">Here we evaluate our model and find that it is really good and a realistic model. Firstly, we extract the individual Accuracy of the target data and then conclude the mean accuracy of the target data. </span>**

**<span style="color:#fffff;">Accuracy of Institute Name - 75.3%</span>**

**<span style="color:#fffff;">Accuracy of Program Name - 75.6%</span>**

**<span style="color:#fffff;">Accuracy of degree - 93.8%</span>**

**<span style="color:#006600;">After calculating the individual accuracy, we will find out the total or mean accuracy of the model.</span>**

**<span style="color:#fffff;">Accuracy of the Model - 81.6%</span>**

***

# <h1 style='background:#000099; border:0; color:white; padding-top: 20px'><center>Prediction of College : IIT-NIT category wise cut-off data</center></h1>

## **<span style="color:#ff3385;">üîÆ Prediction of Colleges</span>**

The Colleges are predicted by the given featured dataset in which feature like Institute type, Round Number, Quota, Category, Opening Rank and Closing Rank is calculated to find the College, Branch and Degree.
"""

pred_College = pd.read_csv("iit-and-nit-colleges-admission-criteria-version-2.csv")
pred_College.head()

"""## **<span style="color:#a300cc;">üîÅ Converting object values into numerical form</span>**

**institute_type** - IIT : 0, NIT : 1

**Quota** :-

AI : All-India - 0

HS : Home-State - 3

OS : Other-State - 6

AP : Andhra Pradesh - 1

GO : Goa - 2

JK : Jammu & Kashmir - 4

LA : Ladakh - 5

**Pool** - Gender-Neutral : 0, Female-only : 1

**Category** :-

GEN : General - 0

OBC-NCL : Other Backward Classes-Non Creamy Layer - 4

SC : Scheduled Castes - 6

ST : Scheduled Tribes - 8

GEN-PWD : General & Persons with Disabilities - 3

OBC-NCL-PWD : Other Backward Classes & Persons with Disabilities - 5

SC-PWD : Scheduled Castes & Persons with Disabilities - 7

ST-PWD : Scheduled Tribes & Persons with Disabilities - 9

GEN-EWS : General & Economically Weaker Section - 1

GEN-EWS-PWD : General & Economically Weaker Section & Persons with Disability - 2
"""

# Changing Institute type

pred_College['institute_type'] = [0 if x == 'IIT' else 1 for x in pred_College['institute_type']]
pred_College['institute_type'].unique()

# Labeling the quota values

le = LabelEncoder()
pred_College['quota'] = le.fit_transform(pred_College['quota'])
pred_College['quota'].unique()

# changing the pool values

pred_College['pool'] = [0 if x == 'Gender-Neutral' else 1 for x in pred_College['pool']]
pred_College['pool'].unique()

# Labeling the categories

pred_College['category']= le.fit_transform(pred_College['category'])
pred_College['category'].unique()

# Selecting the target data

y1 = pred_College[['institute_short', 'degree_short', 'program_name']]

# Selecting the featured data

X1 = pred_College[['category', 'quota', 'pool', 'institute_type', 'round_no',
       'opening_rank', 'closing_rank']]

"""## **<span style="color:#ff3385;">üíî Splitting the training and testing data </span>**"""

# Spilliting the data into training and testing dataset

from sklearn.model_selection import train_test_split
X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, train_size = 0.8)

a1 = np.array([X1_train.shape, X1_test.shape, y1_train.shape, y1_test.shape], dtype = 'object')
a1

"""## **<span style="color:#ff3385;">ü§ñ Generating the model</span>**"""

# Importing library for mdoel generation

from sklearn.neighbors import KNeighborsClassifier
model1 = KNeighborsClassifier()

model1.fit(X1_train, y1_train)

# predicting the dataset

y_pred1 = model1.predict(X1_test)
y_pred1

# prediction

Prediction1 = pd.DataFrame(model1.predict([[0, 0, 0, 1, 6, 1000, 2841], [5, 5, 1, 0, 2, 1000, 1841]]), columns = [['College', 'Branch', 'Degree']])
Prediction1
# Prediction1 = model1.predict([[0, 1, 10, 10, 10, 5000, 2841]])
# print(Prediction1)

"""# **<span style="color:#ff3385;">üì≤ Pickling the model for the deployment</span>**"""

import pickle

pickle.dump(model1, open("model1.pkl", "wb"))

loaded_model = pickle.load(open("model1.pkl", 'rb'))
result = loaded_model.predict([[1, 1, 10, 10, 10, 5000, 2841]])
print(result)

result = loaded_model.predict([[0, 6, 0, 0, 0, 1000, 2841]])
print(result)

"""# **<span style="color:#ff3385;">ü§ò Conclusion</span>**
It takes a great deal of effort to make it to elite engineering schools of India. It is quite evident from the above analysis that the acceptance rate of highly reputed IIT and NIT is quite low. Also, the top rankers get into these schools along those who have attained certain haigh ranks or a quota via some source such as state.
***
"""